name: Test Approval Execution

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]
  push:
    paths:
      - 'scripts/approve-pr.sh'
      - 'action.yml'
      - '.github/workflows/test-approval-execution.yml'

permissions:
  contents: read
  pull-requests: write

jobs:
  test-unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Run approval execution tests
        run: ./scripts/test-approve-pr.sh

  test-approval-flow:
    name: Test Complete Approval Flow
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Add test label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['auto-approve-test']
              });
            } catch (error) {
              console.log('Could not add label:', error.message);
            }
      
      - name: Create a passing check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const { data: check } = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Test Check for Approval',
              head_sha: pr.head.sha,
              status: 'completed',
              conclusion: 'success',
              output: {
                title: 'Test Check Passed',
                summary: 'This check was created to test the approval flow'
              }
            });
      
      - name: Run auto-approve action
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          allowed-authors: ${{ github.actor }}
          required-labels: 'auto-approve-test'
          label-match-mode: 'any'
          wait-for-checks: 'false'  # Don't wait to avoid circular dependency

  test-no-permissions:
    name: Test Insufficient Permissions
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Create limited scope token
        id: token
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // In a real scenario, you'd use a token with limited permissions
            // For testing, we'll just use the same token but test the permission check
            return context.token;
      
      - name: Test with limited token
        id: limited-test
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          VALIDATED_PR_AUTHOR: ${{ github.actor }}
          VALIDATED_LABELS: "test"
          LABEL_MATCH_MODE: "any"
          VALIDATED_CHECKS_TOTAL: "1"
          VALIDATED_CHECKS_PASSED: "1"
        run: |
          # Direct script execution to test permission handling
          ./scripts/approve-pr.sh || exit 0  # We expect this might fail

  test-duplicate-approval:
    name: Test Duplicate Approval Prevention
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: First approval attempt
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          wait-for-checks: 'false'
      
      - name: Wait a moment
        run: sleep 2
      
      - name: Second approval attempt (should skip)
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          wait-for-checks: 'false'