name: Test Status Check Monitoring

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]
  push:
    paths:
      - 'scripts/monitor-checks.sh'
      - 'action.yml'
      - '.github/workflows/test-status-checks.yml'

permissions:
  contents: read
  pull-requests: read
  checks: write

jobs:
  test-unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      
      - name: Run status check monitoring tests
        run: ./scripts/test-monitor-checks.sh

  test-wait-disabled:
    name: Test with Check Waiting Disabled
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Test with wait-for-checks disabled
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          wait-for-checks: 'false'

  test-check-monitoring:
    name: Test Check Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      # Create a simple check that completes quickly
      - name: Create test check run
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Create a check run
            const { data: check } = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Test Check',
              head_sha: pr.head.sha,
              status: 'in_progress'
            });
            
            // Complete it after a short delay
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: check.id,
              status: 'completed',
              conclusion: 'success'
            });
      
      - name: Test waiting for checks
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          wait-for-checks: 'true'
          max-wait-time: '5'
          required-checks: 'Test Check'  # Only wait for the specific check we created

  test-timeout-scenario:
    name: Test Timeout Scenario
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Test timeout with very short wait time
        id: timeout-test
        continue-on-error: true
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          wait-for-checks: 'true'
          max-wait-time: '0.1'  # 6 seconds
          required-checks: 'Non-Existent-Check'
      
      - name: Verify timeout occurred
        if: steps.timeout-test.outcome != 'failure'
        run: |
          echo "Expected timeout test to fail"
          exit 1

  test-required-checks:
    name: Test Required Checks Filter
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Create multiple test checks
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Create multiple checks
            const checks = ['Required Check 1', 'Required Check 2', 'Optional Check'];
            
            for (const name of checks) {
              const { data: check } = await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: name,
                head_sha: pr.head.sha,
                status: 'completed',
                conclusion: 'success'
              });
            }
      
      - name: Test with required checks filter
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          wait-for-checks: 'true'
          max-wait-time: '2'
          required-checks: 'Required Check 1,Required Check 2'