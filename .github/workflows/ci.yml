name: Continuous Integration

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]

# Note: This workflow includes many tests that intentionally fail to verify error handling.
# Tests with "Should Fail" in their name are expected to exit with code 1.
# These use continue-on-error: true and their failure is validated by subsequent steps.

permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write

jobs:
  # Unit Tests - Run all script unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || !startsWith(github.head_ref, 'release-please--')
    strategy:
      fail-fast: false
      matrix:
        test:
          - { name: "Input Validation", script: "./scripts/test-validate-inputs.sh" }
          - { name: "Author Verification", script: "./scripts/test-verify-author.sh" }
          - { name: "Label Validation", script: "./scripts/test-validate-labels.sh" }
          - { name: "Approval Execution", script: "./scripts/test-approve-pr.sh" }
          - { name: "Path Validation", script: "./scripts/test-validate-paths.sh" }
          - { name: "Size Validation", script: "./scripts/test-validate-size.sh" }
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: ${{ github.event.repository.name }}
      
      - name: Install dependencies
        run: |
          # Add small random delay to avoid parallel apt conflicts
          sleep $((RANDOM % 3))
          sudo apt-get update
          sudo apt-get install -y jq
      
      - name: Run ${{ matrix.test.name }} Tests
        run: ${{ matrix.test.script }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          CI: true

  # Integration Tests - Test the action in PR context
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !startsWith(github.head_ref, 'release-please--')
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: ${{ github.event.repository.name }}
      
      # Test basic approval
      - name: Test Basic Approval
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          dry-run: 'true'
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      
      # Test author verification
      - name: Test Unauthorized Author (Should Fail)
        id: test-unauthorized
        continue-on-error: true
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: 'definitely-not-the-pr-author'
          label-match-mode: 'none'
          dry-run: 'true'
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      
      - name: Verify Unauthorized Test Failed
        if: steps.test-unauthorized.outcome != 'failure'
        run: |
          echo "Expected unauthorized author test to fail"
          exit 1
      
      # Test with bot authors
      - name: Test Bot Author Pattern
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: '${{ github.actor }},dependabot[bot],renovate[bot]'
          label-match-mode: 'none'
          dry-run: 'true'
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      
      # Test with multiple authors
      - name: Test Multiple Authors
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: 'user1,user2,${{ github.actor }},user3'
          label-match-mode: 'none'
          dry-run: 'true'
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

  # Label validation tests
  label-tests:
    name: Label Validation Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !startsWith(github.head_ref, 'release-please--')
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: ${{ github.event.repository.name }}
      
      # Test mode 'none'
      - name: Test Label Mode None
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          required-labels: 'do-not-merge,wip,blocked'
          label-match-mode: 'none'
          dry-run: 'true'
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      
      # Test empty label validation
      - name: Test Empty Labels with Mode Any (Should Fail)
        id: test-empty-any
        continue-on-error: true
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'any'
          dry-run: 'true'
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      
      - name: Verify Empty Label Test Failed
        if: steps.test-empty-any.outcome != 'failure'
        run: |
          echo "Expected validation to fail when mode is 'any' but no labels specified"
          exit 1
      
      # Test mode 'all' without all labels
      - name: Test Label Mode All (Should Fail)
        id: test-all-fail
        continue-on-error: true
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          required-labels: 'test-label,approved,ready'
          label-match-mode: 'all'
          dry-run: 'true'
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      
      - name: Verify Mode All Failed
        if: steps.test-all-fail.outcome != 'failure'
        run: |
          echo "Expected mode 'all' to fail when not all labels are present"
          exit 1

  # Input validation tests (for PR contexts)
  input-validation-tests:
    name: Input Validation Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !startsWith(github.head_ref, 'release-please--')
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: ${{ github.event.repository.name }}
      
      # Test valid inputs
      - name: Test Minimal Valid Inputs
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: 'user1,user2,dependabot[bot],${{ github.actor }}'
          label-match-mode: 'none'
          dry-run: 'true'
      
      - name: Test All Valid Inputs
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: 'user1,user2,renovate[bot],${{ github.actor }}'
          label-match-mode: 'none'
          merge-method: 'squash'
          path-filters: 'src/**/*.js,tests/**/*.js'
          max-files-changed: '50'
          dry-run: 'true'
      
      # Test invalid inputs
      - name: Test Missing Allowed Authors (Should Fail)
        id: test-missing-authors
        continue-on-error: true
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          dry-run: 'true'
      
      - name: Verify Missing Authors Failed
        if: steps.test-missing-authors.outcome != 'failure'
        run: exit 1
      
      - name: Test Invalid Label Match Mode (Should Fail)
        id: test-invalid-mode
        continue-on-error: true
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: 'user1'
          label-match-mode: 'invalid'
          dry-run: 'true'
      
      - name: Verify Invalid Mode Failed
        if: steps.test-invalid-mode.outcome != 'failure'
        run: exit 1
      
      - name: Test Invalid Merge Method (Should Fail)
        id: test-invalid-merge
        continue-on-error: true
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: 'user1'
          merge-method: 'invalid'
          dry-run: 'true'
      
      - name: Verify Invalid Merge Failed
        if: steps.test-invalid-merge.outcome != 'failure'
        run: exit 1

  # Approval execution tests
  approval-tests:
    name: Approval Execution Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !startsWith(github.head_ref, 'release-please--')
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: ${{ github.event.repository.name }}
      
      # Test basic approval (in dry-run mode for CI)
      - name: Test Basic Approval
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          dry-run: 'true'
      
      # Test duplicate approval prevention
      - name: Wait Before Duplicate Test
        run: sleep 2
      
      - name: Test Duplicate Approval (Should Skip)
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          dry-run: 'true'
      
      # Test with labels
      - name: Add Test Label
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['ci-test']
              });
              console.log('Successfully added ci-test label');
            } catch (error) {
              console.log('Could not add label:', error.message);
              try {
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: 'ci-test',
                  color: '0969da',
                  description: 'CI test label'
                });
                console.log('Created label, retrying...');
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: ['ci-test']
                });
              } catch (retryError) {
                console.log('Failed to add label after creating:', retryError.message);
              }
            }
      
      - name: Test Approval with Label
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          required-labels: 'ci-test'
          label-match-mode: 'any'
          dry-run: 'true'

  # Path validation tests
  path-tests:
    name: Path Validation Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !startsWith(github.head_ref, 'release-please--')
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: ${{ github.event.repository.name }}
      
      # Test with path filters allowing all files
      - name: Test Path Filter - Allow All
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          path-filters: '**/*'
          dry-run: 'true'
      
      # Test with path filters for docs only
      - name: Test Path Filter - Docs Only
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          path-filters: 'docs/**/*.md,README.md,*.md'
          dry-run: 'true'
      
      # Test with exclusion patterns
      - name: Test Path Filter - Exclude Tests
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          path-filters: '**/*,!tests/**/*,!**/*.test.js'
          dry-run: 'true'
      
      # Test complex pattern combination
      - name: Test Path Filter - Complex Pattern
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          path-filters: '.github/**/*.yml,scripts/**/*.sh,!scripts/test-*.sh'
          dry-run: 'true'

  # Size validation tests
  size-tests:
    name: Size Validation Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !startsWith(github.head_ref, 'release-please--')
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: ${{ github.event.repository.name }}
      
      # Test with no size limits
      - name: Test No Size Limits
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          dry-run: 'true'
      
      # Test with file count limit
      - name: Test File Count Limit
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          max-files-changed: '100'
          dry-run: 'true'
      
      # Test with lines added limit
      - name: Test Lines Added Limit
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          max-lines-added: '5000'
          dry-run: 'true'
      
      # Test with total lines limit
      - name: Test Total Lines Limit
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          max-total-lines: '10000'
          dry-run: 'true'
      
      # Test with all size limits
      - name: Test All Size Limits
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          max-files-changed: '50'
          max-lines-added: '3000'
          max-lines-removed: '1000'
          max-total-lines: '4000'
          size-limit-message: 'This PR is too large for automated approval'
          dry-run: 'true'
      
      # Test with very restrictive limits (should fail for most PRs)
      - name: Test Restrictive Size Limits (Should Fail)
        id: test-restrictive
        continue-on-error: true
        uses: ./
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          allowed-authors: ${{ github.actor }}
          label-match-mode: 'none'
          max-files-changed: '1'
          max-lines-added: '10'
          max-lines-removed: '5'
          max-total-lines: '15'
          dry-run: 'true'
      
      - name: Verify Restrictive Test Failed
        if: steps.test-restrictive.outcome != 'failure'
        run: |
          echo "Expected restrictive size test to fail for most PRs"
          # Don't fail if the PR is actually tiny
          if [[ "${{ steps.test-restrictive.outcome }}" == "success" ]]; then
            echo "Note: This PR might be small enough to pass restrictive limits"
          fi

  # Final check - This job is used as the single required check for branch protection
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs:
      - unit-tests
      - integration-tests
      - label-tests
      - input-validation-tests
      - approval-tests
      - path-tests
      - size-tests
    if: always()
    steps:
      - name: Check all tests passed
        run: |
          # Special handling for release-please branches
          if [[ "${{ github.head_ref }}" == release-please--* ]]; then
            echo "✅ Skipping CI checks for release-please branch"
            {
              echo "## ✅ CI Skipped for Release Please"
              echo ""
              echo "This is a release-please branch. CI checks are automatically skipped."
              echo ""
              echo "Branch: ${{ github.head_ref }}"
              echo ""
              echo "---"
              echo "_Generated at $(date -u +"%Y-%m-%d %H:%M:%S UTC")_"
            } >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          # Check if any of the needed jobs failed
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "❌ One or more CI jobs failed"
            
            # Write failure summary
            {
              echo "## ❌ CI Failed"
              echo ""
              echo "One or more continuous integration checks have failed."
              echo ""
              echo "### Test Results"
              echo ""
              echo "| Test Suite | Status |"
              echo "|------------|--------|"
              echo "| 🧪 Unit Tests (includes all script tests) | ${{ needs.unit-tests.result }} |"
              echo "| 🔗 Integration Tests | ${{ needs.integration-tests.result }} |"
              echo "| 🏷️ Label Tests | ${{ needs.label-tests.result }} |"
              echo "| 📝 Input Validation Tests (PR) | ${{ needs.input-validation-tests.result }} |"
              echo "| 🚀 Approval Tests | ${{ needs.approval-tests.result }} |"
              echo "| 📁 Path Tests | ${{ needs.path-tests.result }} |"
              echo "| 📏 Size Tests | ${{ needs.size-tests.result }} |"
              echo ""
              echo "### Failed Jobs"
              echo ""
              echo "Please check the workflow run for details on the failed jobs."
              echo ""
              echo "---"
              echo "_Generated at $(date -u +"%Y-%m-%d %H:%M:%S UTC")_"
            } >> $GITHUB_STEP_SUMMARY
            
            exit 1
          fi
          
          # Check if any of the needed jobs were cancelled
          if [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "❌ One or more CI jobs were cancelled"
            
            # Write cancelled summary
            {
              echo "## ⚠️ CI Cancelled"
              echo ""
              echo "One or more continuous integration checks were cancelled."
              echo ""
              echo "### Test Results"
              echo ""
              echo "| Test Suite | Status |"
              echo "|------------|--------|"
              echo "| 🧪 Unit Tests (includes all script tests) | ${{ needs.unit-tests.result }} |"
              echo "| 🔗 Integration Tests | ${{ needs.integration-tests.result }} |"
              echo "| 🏷️ Label Tests | ${{ needs.label-tests.result }} |"
              echo "| 📝 Input Validation Tests (PR) | ${{ needs.input-validation-tests.result }} |"
              echo "| 🚀 Approval Tests | ${{ needs.approval-tests.result }} |"
              echo "| 📁 Path Tests | ${{ needs.path-tests.result }} |"
              echo "| 📏 Size Tests | ${{ needs.size-tests.result }} |"
              echo ""
              echo "---"
              echo "_Generated at $(date -u +"%Y-%m-%d %H:%M:%S UTC")_"
            } >> $GITHUB_STEP_SUMMARY
            
            exit 1
          fi
          
          # For PR context, ensure all PR-specific tests ran (unless skipped for release-please)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Checking PR-specific job results..."
            # Check if all jobs were skipped (happens for release-please branches)
            if [[ "${{ needs.unit-tests.result }}" == "skipped" ]] && \
               [[ "${{ needs.integration-tests.result }}" == "skipped" ]] && \
               [[ "${{ needs.label-tests.result }}" == "skipped" ]] && \
               [[ "${{ needs.input-validation-tests.result }}" == "skipped" ]] && \
               [[ "${{ needs.approval-tests.result }}" == "skipped" ]] && \
               [[ "${{ needs.path-tests.result }}" == "skipped" ]] && \
               [[ "${{ needs.size-tests.result }}" == "skipped" ]]; then
              echo "✅ All jobs skipped (release-please branch)"
              exit 0
            fi
            
            if [[ "${{ needs.integration-tests.result }}" != "success" && "${{ needs.integration-tests.result }}" != "skipped" ]] || \
               [[ "${{ needs.label-tests.result }}" != "success" && "${{ needs.label-tests.result }}" != "skipped" ]] || \
               [[ "${{ needs.input-validation-tests.result }}" != "success" && "${{ needs.input-validation-tests.result }}" != "skipped" ]] || \
               [[ "${{ needs.approval-tests.result }}" != "success" && "${{ needs.approval-tests.result }}" != "skipped" ]] || \
               [[ "${{ needs.path-tests.result }}" != "success" && "${{ needs.path-tests.result }}" != "skipped" ]] || \
               [[ "${{ needs.size-tests.result }}" != "success" && "${{ needs.size-tests.result }}" != "skipped" ]]; then
              echo "❌ PR-specific tests did not complete successfully"
              
              # Write PR test failure summary
              {
                echo "## ❌ PR Tests Incomplete"
                echo ""
                echo "Pull request specific tests did not complete successfully."
                echo ""
                echo "### PR Test Results"
                echo ""
                echo "| Test Suite | Status | Required |"
                echo "|------------|--------|----------|"
                echo "| 🔗 Integration Tests | ${{ needs.integration-tests.result }} | ✅ |"
                echo "| 🏷️ Label Tests | ${{ needs.label-tests.result }} | ✅ |"
                echo "| 📝 Input Validation Tests | ${{ needs.input-validation-tests.result }} | ✅ |"
                echo "| 🚀 Approval Tests | ${{ needs.approval-tests.result }} | ✅ |"
                echo "| 📁 Path Tests | ${{ needs.path-tests.result }} | ✅ |"
                echo "| 📏 Size Tests | ${{ needs.size-tests.result }} | ✅ |"
                echo ""
                echo "All PR-specific tests must pass for the CI check to succeed."
                echo ""
                echo "---"
                echo "_Generated at $(date -u +"%Y-%m-%d %H:%M:%S UTC")_"
              } >> $GITHUB_STEP_SUMMARY
              
              exit 1
            fi
          fi
          
          # All required tests passed
          echo "✅ All CI checks passed successfully!"
          echo ""
          echo "Test Results Summary:"
          echo "- Unit Tests (includes all script tests): ${{ needs.unit-tests.result }}"
          echo "- Integration Tests: ${{ needs.integration-tests.result }}"
          echo "- Label Tests: ${{ needs.label-tests.result }}"
          echo "- Input Validation Tests (PR): ${{ needs.input-validation-tests.result }}"
          echo "- Approval Tests: ${{ needs.approval-tests.result }}"
          echo "- Path Tests: ${{ needs.path-tests.result }}"
          echo "- Size Tests: ${{ needs.size-tests.result }}"
          
          # Write to GitHub Step Summary
          {
            echo "## 🎉 CI Success"
            echo ""
            echo "All continuous integration checks have passed!"
            echo ""
            echo "### Test Results"
            echo ""
            echo "| Test Suite | Status |"
            echo "|------------|--------|"
            echo "| 🧪 Unit Tests (includes all script tests) | ${{ needs.unit-tests.result }} |"
            echo "| 🔗 Integration Tests | ${{ needs.integration-tests.result }} |"
            echo "| 🏷️ Label Tests | ${{ needs.label-tests.result }} |"
            echo "| 📝 Input Validation Tests (PR) | ${{ needs.input-validation-tests.result }} |"
            echo "| 🚀 Approval Tests | ${{ needs.approval-tests.result }} |"
            echo "| 📁 Path Tests | ${{ needs.path-tests.result }} |"
            echo "| 📏 Size Tests | ${{ needs.size-tests.result }} |"
            echo ""
            echo "---"
            echo "_Generated at $(date -u +"%Y-%m-%d %H:%M:%S UTC")_"
          } >> $GITHUB_STEP_SUMMARY